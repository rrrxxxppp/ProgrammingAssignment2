x
setmean<-function(z)
m<<-z
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
setmean(5)
getmean()
makevector<-function(x=numeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makevector$setmean(2)
makevector<-function(x=numeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
getmean<-function()
mean
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
setmean(2)
getmean()
source('C:/Users/ruthx/Desktop/coursera/make_vector.R')
setmean(2)
m
setmean(mean=2)
mean
print(setmean(mean=2))
m
makevector<-function(x=numeric()){
##m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
setmean(2)
getmean()
makevector<-function(x=numeric()){
##m<-NULL
set<-function(y){
x<<-y
##m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makevector<-function(x=numeric()){
##m<-NULL
set<-function(y){
x<<-y
##m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
makevector<-function(x=numeric()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()
x
setmean<-function(mean)
m<<-mean
m
getmean<-function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
set(c(2,3,4))
source('C:/Users/ruthx/Desktop/coursera/make_vector.R')
makevector(c(2,3,4))
set(c(2,3,4))
makevector<-function(x=numeric()){
m<-NULL
set<- function(y){
x<<-y
m<<-NULL
}
get<- function()
x
setmean<- function(mean)
m<<-mean
m
getmean<- function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
set<- function(y){
x<<-y
m<<-NULL
}
get<- function()
x
setmean<- function(mean)
m<<-mean
source('C:/Users/ruthx/Desktop/coursera/make_vector.R')
getmean<- function()
m
set(c(2,3,))
set(c(2,3,4))
get()
setmean(2)
getmean()
setmean(5)
getmean()
makevector<-function(x=numeric()){
m<-NULL
set<- function(y){
x<<-y
m<<-NULL
}
get<- function()
x
setmean<- function(mean)
m<<-mean
getmean<- function()
m
list(set=set,get=get,setmean=setmean,getmean=getmean)
}
m<-NULL
setmean(5)
getmean()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
length(cls)
length(cls_list)
as.character(cls_list)
cls_vect<-sapply(cls_list, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
head(flag_shapes)
lapply(flag_shapes,range)
sapply(flags_shapes, range)
sapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
unique_vals
head(unique_vals)
print(x)
print(flag_colors)
unique_vals
traceback
unique_vals
tracebackï¼ˆ
unique_vals
traceback()
browser()
unique_vals
browser()
unique_vals
browser()
unique_vals
unique_vals
unique_vals
trace()
as.list(flags)
trace()
flags
flags(mas.print)
print(flags,max.print)
print(flags,max)
print(flags,max=max)
print(flags,max=max.print)
print(flags)
as.list(flags)
warning('error')
as.list(flags)
warning()
as.list(flags)
warning('error')
unique_vals
warning()
quit()
library(swirl)
swirl()
unique_vals
quit()
library(swirl)
swirl()
library(swirl)
swirl()
rm(list = ls())
unique_vals
View(flag_shapes)
library(datasets)
data(iris)
?iris
iris
s<-split(iris,iris$Species)
sapply(s, function(x) colMeans(x[,'sepal.length']))
sapply(s, function(x) colMeans(x[,'Sepal.Length']))
s
mean(s$virginica[,"Sepal.Length"])
sapply(s, function(s) colMeans(s[,'Sepal.Length']))
lapply(s, function(s) colMeans(s[,'Sepal.Length']))
s
lapply(s, function(s) colMeans(s[,'Sepal.Length']))
lapply(s, function(x) colMeans(x[,'Sepal.Length']))
lapply(s, function(s) colMeans(s[,'Sepal.Length']))
lapply(s, function(s) colMeans(s[,'Sepal.Length']))
lapply(iris, function(x) colMeans(x[,'Sepal.Length']))
apply(iris,2,mean)
iris
colMeans(iris)
colMeans(iris[1:4])
apply(iris[,1:4],2,mean)
lapply(iris, function(x) colMeans(x[,1]))
?colMeans
lapply(iris,function(x) colMeans(x[,1]))
lapply(iris,function(x) colMeans(x[,1],2))
lapply(iris,function(x) colMeans(x))
lapply(iris,function(iris) colMeans(irix))
lapply(iris,function(iris) colMeans(iris))
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
abs(4,8)
abs(4-8)
tapply(mtcars$hp,mtcars$cyl,mean)
hp_mean<-tapply(mtcars$hp,mtcars$cyl,mean)
hp_mean[1]
abs(hp_mean[1]-hp_mean[8])
class(hp_mean)
is.vector(hp_mean)
as.vector(hp_mean)
hp_vect<-as.vector(hp_mean)
abs(hp_vect[1]-hp_vect[3])
debug(ls)
ls
debug(ls)
ls()
4
1
3
View(flags)
View(flag_colors)
View(flag_colors)
View(flag_colors)
View(flag_colors)
x<-matrix(1:9,3,3)
x
solve(x)
x<-matrix(1:8,2,4)
x
solve(x)
?solve
solve(matrix(1:9,3,3))
setwd("C:/Users/ruthx/Desktop/coursera")
getwd("C:/Users/ruthx/Desktop/coursera/ProgrammingAssignment2/")
setwd("C:/Users/ruthx/Desktop/coursera/ProgrammingAssignment2/")
source('cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver<<-NULL
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
}
## Write a short comment describing this function
#cacheSolve <- function(x, ...) {
#}
source('C:/Users/ruthx/Desktop/coursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(matrix(rnorm(9,10)),3,3)
makeCacheMatrix(matrix(rnorm(9,10),3,3))
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
}
getMatrix()
x
makeCacheMatrix(matrix(rnorm(9,10)),3,3)
makeCacheMatrix(matrix(rnorm(9,10),3,3))
x
setMatrix(matrix(rnorm(9,10),3,3))
x
getMatrix()
x$getInverse
x$getInverse()
getInverse()
setInverse(3)
getInverse()
setInverse(NULL)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver<<-NULL
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inver<-x$getInverse()
if(!is.null(inverse)){
message("getting cached data...")
inver
}
else{
theMatrix<-getMatrix()
inver<-solve(theMatrix,...)
x$setInverse(inver)
inver
}
}
x
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver<<-NULL
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inver<-getInverse()
if(!is.null(inverse)){
message("getting cached data...")
inver
}
else{
theMatrix<-getMatrix()
inver<-solve(theMatrix,...)
setInverse(inver)
inver
}
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver<<-NULL
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inver<-getInverse()
if(!is.null(inver)){
message("getting cached data...")
inver
}
else{
theMatrix<-getMatrix()
inver<-solve(theMatrix,...)
setInverse(inver)
inver
}
}
cacheSolve(x)
x
getInverse()
cacheSolve(x)
list(setMatrix= setMatrix, getMatrix= getMatrix,
setInverse = setInverse,
getInverse = getInverse)
## 'inver' is the inverse of the matrix, it is set to NULL when there's no given value.
##
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inver<<-NULL
setMatrix<-function(y){
x<<-y
inver<<-NULL
}
getMatrix<-function()
x
setInverse<-function(solve){
inver<<-solve
}
getInverse<-function()
inver
list(setMatrix= setMatrix, getMatrix= getMatrix,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inver<-getInverse()
if(!is.null(inver)){
message("getting cached data...")
inver
}
else{
theMatrix<-getMatrix()
inver<-solve(theMatrix,...)
setInverse(inver)
inver
}
}
setMatrix(matrix(rnorm(9,10),3,3))
x
solve()
solve(x)
makeCacheMatrix(x)
x
getInverse()
cacheSolve(x)
getInverse()
setMatrix(matrix(rnorm(9,10),3,3))
getInverse()
cacheSolve(x)
getInverse()
cacheSolve(x)
